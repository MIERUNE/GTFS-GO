# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GTFSViewerDockWidget
                                 A QGIS plugin
 The plugin to show routes and stops from GTFS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-10-29
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Kanahiro Iguchi
        email                : kanahiro.iguchi@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import tempfile
import urllib
import time
import zipfile
import shutil

from qgis.PyQt import QtWidgets, uic
from qgis.PyQt.QtCore import QThread, pyqtSignal
from qgis.core import QgsProject, QgsVectorLayer, QgsDataProvider

from .gtfs_jp_parser.__main__ import GTFS_JP

TEMPDIR = os.path.join(tempfile.gettempdir(), 'gtfsviewer')


class GTFSViewerLoader(QtWidgets.QDialog):

    def __init__(self, zipfile: str):
        """Constructor."""
        super().__init__()
        self.ui = uic.loadUi(os.path.join(os.path.dirname(
            __file__), 'gtfs_viewer_loader_base.ui'), self)

        self.zipfile = zipfile

        self.start()

    def start(self):
        shutil.rmtree(TEMPDIR)
        os.makedirs(TEMPDIR, exist_ok=True)

        if self.zipfile.startswith('http'):
            downloader = Downloader(self.zipfile)
            downloader.start()
            downloader.processFinished.connect(
                lambda: self.load_zip(downloader.download_path))
        else:
            self.load_zip(self.zipfile)

    def load_zip(self, zipfile_path):
        extracted_path = os.path.join(TEMPDIR, 'extract')
        os.makedirs(extracted_path, exist_ok=True)
        with zipfile.ZipFile(zipfile_path) as z:
            z.extractall(extracted_path)
        extractor = Extractor(extracted_path)
        extractor.start()
        extractor.progressChanged.connect(self.ui.progressBar.setValue)
        extractor.processFinished.connect(lambda: self.finished(extractor))

    def finished(self, extractor):
        routes_geojson = extractor.routes
        stops_geojson = extractor.stops
        print(routes_geojson)
        print(stops_geojson)


class Downloader(QThread):
    processFinished = pyqtSignal()

    def __init__(self, zipfile_url: str, output_dir=None):
        super().__init__()
        self.zipfile_url = zipfile_url

        self.output_dir = output_dir
        if self.output_dir is None:
            self.output_dir = TEMPDIR

        if not os.path.exists(self.output_dir):
            os.makedirs(self.output_dir, exist_ok=True)

        self.download_path = os.path.join(
            self.output_dir, f'{int(time.time())}.zip')

    def run(self):
        data = urllib.request.urlopen(self.zipfile_url).read()
        with open(self.download_path, mode='wb') as f:
            f.write(data)
        self.processFinished.emit()


class Extractor(QThread):
    progressChanged = pyqtSignal(int)
    processFinished = pyqtSignal()

    def __init__(self, zipfile_path: str):
        super().__init__()
        self.zipfile_path = zipfile_path
        self.routes = None
        self.stops = None

    def run(self):
        gtfs_jp = GTFS_JP(self.zipfile_path)
        self.routes = gtfs_jp.read_routes()
        self.stops = gtfs_jp.read_stops(no_diagrams=True)
        self.processFinished.emit()
