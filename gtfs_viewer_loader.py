# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GTFSViewerDockWidget
                                 A QGIS plugin
 The plugin to show routes and stops from GTFS
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2020-10-29
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Kanahiro Iguchi
        email                : kanahiro.iguchi@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import tempfile

from qgis.PyQt import QtWidgets, uic
from qgis.PyQt.QtCore import QThread, pyqtSignal
from qgis.core import QgsProject, QgsVectorLayer, QgsDataProvider

from .gtfs_viewer_constants import DATAS_DIR


class GTFSViewerLoader(QtWidgets.QDialog):

    def __init__(self, zipfile: str):
        """Constructor."""
        super().__init__()
        self.ui = uic.loadUi(os.path.join(os.path.dirname(
            __file__), 'gtfs_viewer_loader_base.ui'), self)

        self.zipfile = zipfile

    def start(self):
        if self.zipfile.startsWith('http'):
            downloader = Downloader(self.zipfile)
            downloader.run()
            downloader.processFinished.connect(
                lambda: self.extract(downloader.output_dir))
        else:
            self.extract(self.zipfile)

    def extract(self, zipfile_path):
        extractor = Extractor(self.zipfile_path)
        extractor.run()
        extractor.progressChanged(self.ui.progressBar.setValue)
        extractor.processFinished(self.close)


class Downloader(QThread):
    processFinished = pyqtSignal()

    def __init__(self, zipfile_url: str, output_dir=None):
        super().__init__()
        self.zipfile_url = zipfile_url

        self.output_dir = output_dir
        if self.output_dir is None:
            self.output_dir = DATAS_DIR

        if not os.path.exists(self.output_dir):
            os.makedirs(self.output_dir)

    def run(self):
        pass


class Extractor(QThread):
    progressChanged = pyqtSignal(int)
    processFinished = pyqtSignal()

    def __init__(self, zipfile_path: str):
        super().__init__()
        self.zipfile_path = zipfile_path

    def run(self):
        pass
